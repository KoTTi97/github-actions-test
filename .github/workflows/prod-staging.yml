name: Lint and Deploy to Vercel for Production and Staging

on:
  push:
    branches:
      - staging
      - production

jobs:

  lint:
    name: Run Linting
    #runs-on: ubuntu-latest
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Install Dependencies
        working-directory: ./app
        run: pnpm install

      - name: Run type checking
        working-directory: ./app
        run: pnpm check-types

      - name: Run ESLint
        working-directory: ./app
        run: pnpm eslint

  deploy-staging:
    name: Deploy Staging to Vercel
    needs: lint
    if: github.ref == 'refs/heads/staging'
    runs-on: self-hosted
    environment: staging
    steps:
      - uses: actions/checkout@v2
      - name: Print Environment Variables
        id: print_env
        run: |
          echo "VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}"
          echo "VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}"
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_ACCESS_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_ACCESS_TOKEN }}
      - name: Deploy to Vercel
        working-directory: ./app
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_ACCESS_TOKEN }}

  deploy-production:
    name: Deploy Production to Vercel
    needs: lint
    if: github.ref == 'refs/heads/production'
    runs-on: self-hosted
    environment: production
    steps:
      - uses: actions/checkout@v2
      - name: Print Environment Variables
        id: print_env
        run: |
          echo "VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}"
          echo "VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}"
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_ACCESS_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_ACCESS_TOKEN }}
      - name: Deploy to Vercel
        working-directory: ./app
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_ACCESS_TOKEN }}

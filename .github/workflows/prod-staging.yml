name: Lint and Deploy to Vercel for Production and Staging

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_ACCESS_TOKEN: ${{ secrets.VERCEL_ACCESS_TOKEN }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  VERCEL_ENVIRONMENT_FLAG: ""

on:
  push:
    branches:
      - staging
      - main

jobs:

  kotti:
    name: Kotti
    runs-on: ubuntu-latest
    steps:
      - name: Set Production Flag
        id: set-flag
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "Setting vercel environment flag to '--prod'"
            echo "::set-env name=VERCEL_ENVIRONMENT_FLAG::--prod"
          fi
      - name: Print Vercel Environment Flag
        run: | 
          echo "vercel environment flag: ${{ env.VERCEL_ENVIRONMENT_FLAG }}"



#  lint:
#    name: Run Linting
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#      - name: Setup pnpm
#        uses: pnpm/action-setup@v2
#        with:
#          version: 8
#      - name: Setup Node
#        uses: actions/setup-node@v3
#        with:
#          node-version: 18
#          cache-dependency-path: ./app/pnpm-lock.yaml
#          cache: 'pnpm'
#      - name: Install Dependencies
#        working-directory: ./app
#        run: pnpm install
#      - name: Run type checking
#        working-directory: ./app
#        run: pnpm check-types
#      - name: Run ESLint
#        working-directory: ./app
#        run: pnpm eslint
#
#  build:
#    name: Build Next.js App
#    needs: lint
#
#
#  deploy-staging:
#    name: Deploy Staging to Vercel
#    needs: lint
#    if: github.ref == 'refs/heads/staging'
#    runs-on: self-hosted
#    environment: staging
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set up Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: 18
#      - name: Install Dependencies
#        working-directory: ./app
#        run: pnpm install
#      - name: Pull Vercel Environment Information
#        working-directory: ./app
#        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_ACCESS_TOKEN }}
#      - name: Build Project Artifacts
#        working-directory: ./app
#        run: vercel build --token=${{ secrets.VERCEL_ACCESS_TOKEN }}
#      - name: Deploy to Vercel
#        working-directory: ./app
#        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_ACCESS_TOKEN }}
#      - name: Apply Database Migrations
#        id: apply-db-migrations
#        working-directory: ./app
#        run: node ci/apply-db-migrations.mjs
#      - name: Get Latest Vercel Preview Deployment ID
#        id: get-latest-preview-deployment-id
#        run: |
#          result=$(node ./app/ci/get-latest-vercel-deployment.js "prefers-deployment-url" "preview")
#          echo "LATEST_PREVIEW_DEPLOYMENT_URL=$result" >> $GITHUB_OUTPUT
#      - name: Assign staging alias/domain to latest preview deployment
#        run: |
#          captured_latestPreviewDeploymentUrl="${{ steps.get-latest-preview-deployment-id.outputs.LATEST_PREVIEW_DEPLOYMENT_URL }}"
#          echo "Assigning staging alias domain '${{ vars.DEPLOYMENT_DOMAIN }}' to preview deployment with URL: $captured_latestPreviewDeploymentUrl"
#          vercel alias set $captured_latestPreviewDeploymentUrl ${{ vars.DEPLOYMENT_DOMAIN }} --token=${{ secrets.VERCEL_ACCESS_TOKEN }}
#
#  deploy-production:
#    name: Deploy Production to Vercel
#    needs: lint
#    if: github.ref == 'refs/heads/main'
#    runs-on: self-hosted
#    environment: production
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set up Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: 18
#      - name: Install Dependencies
#        working-directory: ./app
#        run: pnpm install
#      - name: Get Latest Vercel Production Deployment ID
#        id: get-latest-deployment-id
#        run: |
#          result=$(node ./app/ci/get-latest-vercel-deployment.js "prefers-deployment-id" "production")
#          echo "LATEST_DEPLOYMENT_ID=$result" >> $GITHUB_OUTPUT
#      - name: Pull Vercel Environment Information
#        working-directory: ./app
#        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_ACCESS_TOKEN }}
#      - name: Build Project Artifacts
#        working-directory: ./app
#        run: vercel build --prod --token=${{ secrets.VERCEL_ACCESS_TOKEN }}
#      - name: Deploy to Vercel
#        working-directory: ./app
#        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_ACCESS_TOKEN }}
#      - name: Apply Database Migrations
#        id: apply-db-migrations
#        working-directory: ./app
#        run: node ci/apply-db-migrations.mjs
#      - name: Rollback Vercel Deployment after failed database migrations
#        if: failure() && steps.apply-db-migrations.conclusion == 'failure'
#        run: |
#          echo "Database migrations failed. Rolling back deployment."
#          captured_latestDeploymentId="${{ steps.get-latest-deployment-id.outputs.LATEST_DEPLOYMENT_ID }}"
#          echo "Rolling back deployment with ID: $captured_latestDeploymentId"
#          vercel rollback $captured_latestDeploymentId --token=${{ secrets.VERCEL_ACCESS_TOKEN }}
#      - name: Get Vercel Deployment URL of rolled back deployment
#        if: failure() && steps.apply-db-migrations.conclusion == 'failure'
#        id: get-rolled-back-deployment-url
#        run: |
#          result=$(node ./app/ci/get-latest-vercel-deployment.js "prefers-deployment-url" "production")
#          echo "ROLLED_BACK_DEPLOYMENT_URL=$result" >> $GITHUB_OUTPUT
#      - name: Delete rolled back deployment from Vercel
#        if: failure() && steps.apply-db-migrations.conclusion == 'failure'
#        run: |
#          captured_rolledBackDeploymentUrl="${{ steps.get-rolled-back-deployment-url.outputs.ROLLED_BACK_DEPLOYMENT_URL }}"
#          echo "Deleting rolled back deployment with URL: $captured_rolledBackDeploymentUrl"
#          vercel remove $captured_rolledBackDeploymentUrl --yes --token=${{ secrets.VERCEL_ACCESS_TOKEN }}
